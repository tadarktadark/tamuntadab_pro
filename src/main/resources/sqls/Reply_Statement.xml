<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tdtd.tmtd.model.mapper.ReplyDaoImpl">
	<!-- 게시글의 총 댓글 수 조회 -->
	<select id="getReplyCount" resultType="java.lang.Integer">
		SELECT COUNT(*)
			FROM (SELECT CORE_SEQ,CORE_BOARD_ID AS BOARD_ID, CORE_STEP AS "STEP"
					FROM COMMUNITY_REPLY
				UNION ALL
				SELECT SACR_SEQ, SACR_BOARD_ID AS BOARD_ID, SACR_STEP AS "STEP"
					FROM SAKJE_COMMUNITY_REPLY)
			WHERE BOARD_ID=#{boardId}
			AND "STEP"=0
	</select>
	
	<!-- 게시글의 ROOT 댓글 목록 조회 -->
	<select id="getRootReplyList" resultType="replyVo">
		SELECT SEQ, WRITER_ID, CONTENT , ROOT_SEQ, STEP, CHAETAEK, REGDATE,"UPDATE", STATE
			FROM (SELECT SEQ, WRITER_ID, CONTENT , ROOT_SEQ, STEP, CHAETAEK, REGDATE,"UPDATE",STATE,
						ROW_NUMBER() OVER(ORDER BY CHAETAEK DESC, ROOT_SEQ, STEP) rn
						FROM (SELECT CORE_SEQ AS SEQ,
									USER_NICKNAME AS WRITER_ID, CORE_CONTENT AS CONTENT, 
									CASE (SELECT CORE_CHAETAEK 
										FROM COMMUNITY_REPLY
										WHERE CORE_SEQ=(SELECT CORE_ROOT_SEQ
															FROM COMMUNITY_REPLY c1
															WHERE c1.CORE_SEQ=c2.CORE_SEQ)) WHEN 'Y' THEN 0 ELSE CORE_ROOT_SEQ END AS ROOT_SEQ, 
									CORE_STEP AS STEP, CORE_CHAETAEK AS CHAETAEK, CORE_STATE AS STATE,
									CASE TO_CHAR(CORE_REGDATE, 'yyyymmdd') WHEN TO_CHAR(CURRENT_DATE, 'yyyymmdd') THEN TO_CHAR(CORE_REGDATE, 'HH24:MI')ELSE TO_CHAR(CORE_REGDATE, 'yyyy. mm. dd') END AS REGDATE,
									CASE TO_CHAR(CORE_UPDATE, 'yyyymmdd') WHEN TO_CHAR(CURRENT_DATE, 'yyyymmdd') THEN TO_CHAR(CORE_UPDATE, 'HH24:MI')ELSE TO_CHAR(CORE_UPDATE, 'yyyy. mm. dd') END AS "UPDATE" 
								FROM COMMUNITY_REPLY c2 JOIN USER_PROFILE
								ON CORE_WRITER_ID = USER_ACCOUNT_ID
								WHERE CORE_BOARD_ID = #{boardId}
									AND CORE_STEP=0
							UNION ALL
							SELECT SACR_SEQ AS SEQ, 'DEL@' AS WRITER_ID , TO_CLOB('작성자에 의해 삭제되었습니다.') AS CONTENT,
									CASE (SELECT CORE_CHAETAEK 
										FROM COMMUNITY_REPLY
										WHERE CORE_SEQ=(SELECT SACR_ROOT_SEQ
															FROM SAKJE_COMMUNITY_REPLY s1
															WHERE s1.SACR_SEQ=s2.SACR_SEQ)) WHEN 'Y' THEN 0 ELSE SACR_ROOT_SEQ END AS ROOT_SEQ, 
									SACR_STEP AS STEP, 'N' AS CHAETAEK, 'Y' AS STATE,
									CASE TO_CHAR(SACR_REGDATE, 'yyyymmdd') WHEN TO_CHAR(CURRENT_DATE, 'yyyymmdd') THEN TO_CHAR(SACR_REGDATE, 'HH24:MI')ELSE TO_CHAR(SACR_REGDATE, 'yyyy. mm. dd') END AS REGDATE,
									CASE TO_CHAR(SACR_REGDATE, 'yyyymmdd') WHEN TO_CHAR(CURRENT_DATE, 'yyyymmdd') THEN TO_CHAR(SACR_REGDATE, 'HH24:MI')ELSE TO_CHAR(SACR_REGDATE, 'yyyy. mm. dd') END AS "UPDATE"
								FROM SAKJE_COMMUNITY_REPLY s2
								WHERE SACR_BOARD_ID = #{boardId}
									AND SACR_STEP=0))
			WHERE rn BETWEEN #{start} AND #{end}
	</select>
	
	<!-- 게시글의 대댓글 목록 조회 -->
	<select id="getReReplyList" resultType="replyVo">
		SELECT SEQ, WRITER_ID, CONTENT , ROOT_SEQ, STEP, CHAETAEK, REGDATE,"UPDATE",STATE
			FROM (SELECT CORE_SEQ AS SEQ, USER_NICKNAME AS WRITER_ID, CORE_CONTENT AS CONTENT, 
						CASE (SELECT CORE_CHAETAEK 
							FROM COMMUNITY_REPLY
							WHERE CORE_SEQ=(SELECT CORE_ROOT_SEQ
												FROM COMMUNITY_REPLY c1
												WHERE c1.CORE_SEQ=c2.CORE_SEQ)) WHEN 'Y' THEN 0 ELSE CORE_ROOT_SEQ END AS ROOT_SEQ, 
						CORE_STEP AS STEP, CORE_CHAETAEK AS CHAETAEK, CORE_STATE AS STATE,
						CASE TO_CHAR(CORE_REGDATE, 'yyyymmdd') WHEN TO_CHAR(CURRENT_DATE, 'yyyymmdd') THEN TO_CHAR(CORE_REGDATE, 'HH24:MI')ELSE TO_CHAR(CORE_REGDATE, 'yyyy. mm. dd') END AS REGDATE,
						CASE TO_CHAR(CORE_UPDATE, 'yyyymmdd') WHEN TO_CHAR(CURRENT_DATE, 'yyyymmdd') THEN TO_CHAR(CORE_UPDATE, 'HH24:MI')ELSE TO_CHAR(CORE_UPDATE, 'yyyy. mm. dd') END AS "UPDATE" 
					FROM COMMUNITY_REPLY c2 JOIN USER_PROFILE
					ON CORE_WRITER_ID = USER_ACCOUNT_ID
					WHERE CORE_BOARD_ID = #{boardId}
						AND NOT CORE_STEP=0
				UNION ALL
				SELECT SACR_SEQ AS SEQ, 'DEL@' AS WRITER_ID , TO_CLOB('작성자에 의해 삭제되었습니다.') AS CONTENT,
						CASE (SELECT CORE_CHAETAEK 
							FROM COMMUNITY_REPLY
							WHERE CORE_SEQ=(SELECT SACR_ROOT_SEQ
												FROM SAKJE_COMMUNITY_REPLY s1
												WHERE s1.SACR_SEQ=s2.SACR_SEQ)) WHEN 'Y' THEN 0 ELSE SACR_ROOT_SEQ END AS ROOT_SEQ, 
						SACR_STEP AS STEP, 'N' AS CHAETAEK, 'Y' AS STATE,
						CASE TO_CHAR(SACR_REGDATE, 'yyyymmdd') WHEN TO_CHAR(CURRENT_DATE, 'yyyymmdd') THEN TO_CHAR(SACR_REGDATE, 'HH24:MI')ELSE TO_CHAR(SACR_REGDATE, 'yyyy. mm. dd') END AS REGDATE,
						CASE TO_CHAR(SACR_REGDATE, 'yyyymmdd') WHEN TO_CHAR(CURRENT_DATE, 'yyyymmdd') THEN TO_CHAR(SACR_REGDATE, 'HH24:MI')ELSE TO_CHAR(SACR_REGDATE, 'yyyy. mm. dd') END AS "UPDATE"
					FROM SAKJE_COMMUNITY_REPLY s2
					WHERE SACR_BOARD_ID = #{boardId}
						AND NOT SACR_STEP=0)
			WHERE ROOT_SEQ IN
				<foreach collection="rootSeq"  item="seq" open="(" separator="," close=")"> <!-- item은 값만 담는 변수 -->
					#{seq}
				</foreach>
			ORDER BY ROOT_SEQ, STEP
	</select>
	
	<!-- TDF019	TDW55441	ROOT 댓글 작성 -->
	<insert id="insertRootReply">
		INSERT INTO COMMUNITY_REPLY(CORE_SEQ, CORE_BOARD_ID, CORE_WRITER_ID, CORE_CONTENT, 
								CORE_ROOT_SEQ, 
								CORE_STEP)
					VALUES(COMMUNITY_REPLY_SEQ.NEXTVAL, #{boardId}, #{writerId}, #{content}, 
							COMMUNITY_REPLY_SEQ.CURRVAL, 0)
	</insert>
	
	<!-- ROOT 댓글 개수 조회 -->
	<select id="getRootReplyCount" resultType="java.lang.Integer">
		<if test="board=='pilgi'">
			SELECT PIBO_REPLY_COUNT
				FROM PILGI_BOARD
				WHERE PIBO_ID=#{boardId}
		</if>
		<if test="board=='jilmun'">
			SELECT JIBO_REPLY_COUNT
				FROM JILMUN_BOARD
				WHERE JIBO_ID=#{boardId}
		</if>
		<if test="board=='jayu'">
			SELECT JABO_REPLY_COUNT
				FROM JAYU_BOARD
				WHERE JABO_ID=#{boardId}
		</if>
	</select>
	
	<!-- 게시판 root 댓글 개수 수정 -->
	<update id="updateBoardReplyCount">
		<if test="board=='pilgi'">
			UPDATE PILGI_BOARD SET PIBO_REPLY_COUNT =#{count}
				WHERE PIBO_ID=#{boardId}
		</if>
		<if test="board=='jilmun'">
			UPDATE JILMUN_BOARD SET JIBO_REPLY_COUNT =#{count}
				WHERE JIBO_ID=#{boardId}
		</if>
		<if test="board=='jayu'">
			UPDATE JAYU_BOARD SET JABO_REPLY_COUNT =#{count}
				WHERE JABO_ID=#{boardId}
		</if>
	</update>
	
	<!-- 대댓글 작성 -->
	<insert id="insertReReply">
		INSERT INTO COMMUNITY_REPLY(CORE_SEQ, CORE_BOARD_ID, CORE_WRITER_ID, CORE_CONTENT, 
								CORE_ROOT_SEQ, 
								CORE_STEP)
					VALUES(COMMUNITY_REPLY_SEQ.NEXTVAL, #{boardId}, #{writerId}, #{content},  
							#{rootSeq}, (SELECT MAX(STEP)+1
											FROM (SELECT CORE_STEP AS "STEP"
														FROM COMMUNITY_REPLY
														WHERE CORE_ROOT_SEQ = #{rootSeq}
													UNION
													SELECT SACR_STEP AS "STEP"
														FROM SAKJE_COMMUNITY_REPLY
														WHERE SACR_ROOT_SEQ = #{rootSeq})))
	</insert>
	
	<!-- 댓글 수정 데이터 조회 -->
	<select id="getUpdateContent" resultType="java.lang.String">
		SELECT CORE_CONTENT AS CONTENT
			FROM COMMUNITY_REPLY
			WHERE CORE_SEQ=#{seq}
	</select>
	
	<!-- 댓글 수정 -->
	<update id="updateReply">
		UPDATE COMMUNITY_REPLY SET CORE_CONTENT = #{content}, CORE_UPDATE = CURRENT_DATE
			WHERE CORE_SEQ=#{seq}
	</update>
	
	<!-- 댓글 삭제 -->
	<delete id="deleteReply">
		DELETE FROM COMMUNITY_REPLY
			WHERE CORE_SEQ=#{seq}
	</delete>
	
	<!-- 삭제 댓글 정보 조회 -->
	<select id="getReplyDetail" resultType="replyVo">
		SELECT CORE_SEQ AS SEQ, CORE_BOARD_ID AS BOARD_ID, CORE_ROOT_SEQ AS ROOT_SEQ, CORE_STEP AS "STEP"
			FROM COMMUNITY_REPLY
			WHERE CORE_SEQ=#{seq}
	</select>
	
	<!-- 삭제 댓글 입력 -->
	<insert id="insertSakje">
		INSERT INTO SAKJE_COMMUNITY_REPLY(SACR_SEQ, SACR_BOARD_ID, SACR_ROOT_SEQ, SACR_STEP)
						VALUES(#{seq}, #{boardId}, #{rootSeq}, #{step})
	</insert>
				
	<!-- 댓글 채택 -->
	<update id="updateChaetaekY">
		UPDATE COMMUNITY_REPLY SET CORE_CHAETAEK ='Y'
			WHERE CORE_SEQ =#{seq}
	</update>
	
	<!-- 채택 보드 업데이트 -->
	<update id="updateChaetaekBoard">
		UPDATE JILMUN_BOARD SET JIBO_CHAETAEK='Y'
			WHERE JIBO_ID=#{boardId}
	</update>
	
	<!-- 내가 작성한 필기 개수 조회-->
	<select id="getWritePilgiCount" resultType="java.lang.Integer">
		SELECT COUNT(*)
			FROM PILGI_BOARD
			WHERE PIBO_WRITER_ID =#{accountId}
	</select>
	
	<!-- 내가 작성한 질문 개수 조회-->
	<select id="getWriteJilmunCount" resultType="java.lang.Integer">
		SELECT COUNT(*)
			FROM JILMUN_BOARD
			WHERE JIBO_WRITER_ID =#{accountId}
	</select>
	
	<!-- 내가 작성한 자유 개수 조회-->
	<select id="getWriteJayuCount" resultType="java.lang.Integer">
		SELECT COUNT(*)
			FROM JAYU_BOARD
			WHERE JABO_WRITER_ID =#{accountId}
	</select>
	
	<!-- 내가 작성한 댓글 개수 조회-->
	<select id="getWriteReplyCount" resultType="java.lang.Integer">
		SELECT COUNT(*)
			FROM COMMUNITY_REPLY
			WHERE CORE_WRITER_ID = #{accountId}
	</select>
	
	<!-- 좋아요한 글 개수 조회 -->
	<select id="getLikeCommCount" resultType="java.lang.Integer">
		SELECT COUNT(*)
			FROM (SELECT PIBO_ID AS ID, PIBO_STATE AS STATE, PIBO_LIKE_USER AS LIKE_USER
						FROM PILGI_BOARD
						WHERE PIBO_VIEW_GROUP = 'A'
					UNION ALL
					SELECT PIBO_ID, PIBO_STATE, PIBO_LIKE_USER
						FROM PILGI_BOARD
						WHERE PIBO_VIEW_GROUP = 'C'
							AND PIBO_CLAS_ID IN (SELECT CLCH_CLAS_ID
												FROM CLASS_CHAMYEOJA
												WHERE CLCH_ACCOUNT_ID=#{accountId})
					UNION ALL
					SELECT JIBO_ID, JIBO_STATE, JIBO_LIKE_USER
						FROM JILMUN_BOARD
					UNION ALL
					SELECT JABO_ID, JABO_STATE, JABO_LIKE_USER
						FROM JAYU_BOARD) b
			WHERE STATE = 'N'
				AND NOT JSON_VALUE(b.LIKE_USER,'$.${accountId}') IS NULL
	</select>
	
	<!-- 내가 작성한 필기 목록 조회 -->
	<select id="getWritePilgiList" resultType="boardVo">
		SELECT ID, TITLE, CLAS_ID, VIEW_GROUP, DOWNLOAD_GROUP, STATE
			FROM (SELECT PIBO_ID AS ID, CLAS_TITLE AS TITLE, PIBO_CLAS_ID AS CLAS_ID,
					CASE PIBO_VIEW_GROUP WHEN 'I' THEN '나' WHEN 'C' THEN '클래스' ELSE '전체' END AS VIEW_GROUP, 
					CASE PIBO_DOWNLOAD_GROUP WHEN 'I' THEN '나' WHEN 'C' THEN '클래스' ELSE '전체' END AS DOWNLOAD_GROUP, PIBO_STATE AS STATE,
					ROW_NUMBER() OVER(ORDER BY PIBO_REGDATE DESC, PIBO_ID DESC) AS RN
					FROM PILGI_BOARD JOIN CLASS
					ON PIBO_CLAS_ID = CLAS_ID
					WHERE PIBO_WRITER_ID = #{accountId})
			WHERE RN BETWEEN #{start} AND #{end}
			ORDER BY RN
	</select>
	
	<!-- 내가 작성한 질문 목록 조회 -->
	<select id="getWriteJilmunList" resultType="boardVo">
		SELECT ID, TITLE, CHAETAEK, STATE
			FROM (SELECT JIBO_ID AS ID, JIBO_TITLE AS TITLE, JIBO_CHAETAEK AS CHAETAEK, JIBO_STATE AS STATE,
					ROW_NUMBER() OVER(ORDER BY JIBO_REGDATE DESC, JIBO_ID DESC) rn
					FROM JILMUN_BOARD LEFT JOIN CLASS
					ON JIBO_CLAS_ID = CLAS_ID
					WHERE JIBO_WRITER_ID=#{accountId})
			WHERE rn BETWEEN #{start} AND #{end}
			ORDER BY rn
	</select>
	
	<!-- 내가 작성한 자유 목록 조회 -->
	<select id="getWriteJayuList" resultType="boardVo">
		SELECT ID, TITLE, STATE 
			FROM (SELECT JABO_ID AS ID, JABO_TITLE AS TITLE, JABO_STATE AS STATE,
						ROW_NUMBER() OVER(ORDER BY JABO_REGDATE DESC, JABO_ID DESC) rn		
						FROM JAYU_BOARD
						WHERE JABO_WRITER_ID=#{accountId})
			WHERE rn BETWEEN #{start} AND #{end}
			ORDER BY rn
	</select>
	
	<!-- 내가 작성한 댓글 목록 조회 -->
	<select id="getWriteReplyList" resultType="replyVo">
		SELECT SEQ, BOARD_ID, WRITER_ID, CONTENT, STATE, CHAETAEK
			FROM (SELECT SEQ, BOARD_ID, WRITER_ID, CONTENT, STATE,CHAETAEK,
						ROW_NUMBER() OVER(ORDER BY SEQ DESC) rn
					FROM (SELECT CORE_SEQ AS SEQ, CORE_BOARD_ID AS BOARD_ID, CLAS_TITLE AS WRITER_ID, CORE_CONTENT AS CONTENT, CORE_STATE AS STATE, CORE_WRITER_ID, 
								CASE WHEN PIBO_STATE = 'Y' THEN 'Y'
									WHEN PIBO_STATE = 'D' THEN 'D'
									WHEN PIBO_ID IS NULL THEN 'N' 
									WHEN PIBO_VIEW_GROUP = 'I' THEN 'I' 
									ELSE 'G' END AS CHAETAEK
								FROM (SELECT * FROM COMMUNITY_REPLY WHERE SUBSTR(CORE_BOARD_ID,1,2)='PI') LEFT JOIN PILGI_BOARD
								ON CORE_BOARD_ID = PIBO_ID
								JOIN CLASS ON PIBO_CLAS_ID = CLAS_ID
							UNION ALL
							SELECT CORE_SEQ AS SEQ, CORE_BOARD_ID AS BOARD_ID, JIBO_TITLE AS WRITER_ID, CORE_CONTENT AS CONTENT, CORE_STATE AS STATE, CORE_WRITER_ID, 
								CASE WHEN JIBO_STATE ='D' THEN 'D'
									WHEN JIBO_ID IS NULL THEN 'N' 
									WHEN JIBO_CHAETAEK = 'Y' THEN 'C' 
									ELSE 'G' END AS CHAETAEK
								FROM (SELECT * FROM COMMUNITY_REPLY WHERE SUBSTR(CORE_BOARD_ID,1,2)='JI') LEFT JOIN JILMUN_BOARD
								ON CORE_BOARD_ID = JIBO_ID
							UNION ALL
							SELECT CORE_SEQ AS SEQ, CORE_BOARD_ID AS BOARD_ID, JABO_TITLE AS WRITER_ID, CORE_CONTENT AS CONTENT, CORE_STATE AS STATE, CORE_WRITER_ID, 
								CASE WHEN JABO_STATE = 'D' THEN 'D'
									WHEN JABO_ID IS NULL THEN 'N'
									ELSE 'G' END AS CHAETAEK
								FROM (SELECT * FROM COMMUNITY_REPLY WHERE SUBSTR(CORE_BOARD_ID,1,2)='JA') LEFT JOIN JAYU_BOARD
								ON CORE_BOARD_ID = JABO_ID)
					WHERE CORE_WRITER_ID=#{accountId})
			WHERE rn BETWEEN #{start} AND #{end}
			ORDER BY rn
	</select>
	
	<!-- 좋아요한 글 목록 조회 -->
	<select id="getLikeCommList" resultType="boardVo">
		SELECT ID, TITLE, LIKE_USER, REGDATE, "UPDATE"
			FROM (SELECT ID, TITLE, LIKE_USER, REGDATE, "UPDATE",
					ROW_NUMBER() OVER(ORDER BY REGDATE DESC, "UPDATE" DESC) rn
					FROM (SELECT PIBO_ID AS ID, CLAS_TITLE AS TITLE, 
								CASE NVL(JSON_VALUE(PILGI_BOARD.PIBO_LIKE_USER,'$.${accountId}'), '0') WHEN '0' THEN '0' ELSE '1' END AS LIKE_USER,
								JSON_VALUE(PILGI_BOARD.PIBO_LIKE_USER,'$.${accountId}') AS REGDATE,
								PIBO_UPDATE AS "UPDATE"
							FROM PILGI_BOARD JOIN CLASS
							ON PIBO_CLAS_ID = CLAS_ID
							JOIN USER_PROFILE
							ON PIBO_WRITER_ID = USER_ACCOUNT_ID
							WHERE NOT JSON_VALUE(PILGI_BOARD.PIBO_LIKE_USER,'$.${accountId}') IS NULL
								AND PIBO_STATE = 'N'
								AND PIBO_VIEW_GROUP='C'
								AND PIBO_CLAS_ID IN (SELECT CLCH_CLAS_ID
														FROM CLASS_CHAMYEOJA
														WHERE CLCH_ACCOUNT_ID=#{accountId})
						UNION ALL
						SELECT PIBO_ID AS ID, CLAS_TITLE AS TITLE,  
								CASE NVL(JSON_VALUE(PILGI_BOARD.PIBO_LIKE_USER,'$.${accountId}'), '0') WHEN '0' THEN '0' ELSE '1' END AS LIKE_USER,
								JSON_VALUE(PILGI_BOARD.PIBO_LIKE_USER,'$.${accountId}') AS REGDATE,
								PIBO_UPDATE AS "UPDATE"
							FROM PILGI_BOARD JOIN CLASS
							ON PIBO_CLAS_ID = CLAS_ID
							JOIN USER_PROFILE
							ON PIBO_WRITER_ID = USER_ACCOUNT_ID
							WHERE NOT JSON_VALUE(PILGI_BOARD.PIBO_LIKE_USER,'$.${accountId}') IS NULL
								AND PIBO_STATE = 'N'
								AND PIBO_VIEW_GROUP='A'
						UNION ALL
						SELECT JIBO_ID AS ID, JIBO_TITLE AS TITLE,
								CASE NVL(JSON_VALUE(JILMUN_BOARD.JIBO_LIKE_USER,'$.${accountId}'), '0') WHEN '0' THEN '0' ELSE '1' END AS LIKE_USER,
								JSON_VALUE(JILMUN_BOARD.JIBO_LIKE_USER,'$.${accountId}') AS REGDATE,
								JIBO_UPDATE AS "UPDATE"
							FROM JILMUN_BOARD
							WHERE NOT JSON_VALUE(JILMUN_BOARD.JIBO_LIKE_USER,'$.${accountId}') IS NULL
								AND JIBO_STATE = 'N'
						UNION ALL
						SELECT JABO_ID AS ID, JABO_TITLE AS TITLE,
								CASE NVL(JSON_VALUE(JAYU_BOARD.JABO_LIKE_USER,'$.${accountId}'), '0') WHEN '0' THEN '0' ELSE '1' END AS LIKE_USER,
								JSON_VALUE(JAYU_BOARD.JABO_LIKE_USER,'$.${accountId}') AS REGDATE,
								JABO_UPDATE AS "UPDATE"
							FROM JAYU_BOARD
							WHERE NOT JSON_VALUE(JAYU_BOARD.JABO_LIKE_USER,'$.${accountId}') IS NULL
								AND JABO_STATE = 'N'))
			WHERE rn BETWEEN #{start} AND #{end}
			ORDER BY rn
	</select>
	
	<select id="getBoardAlramInfo" resultType="boardVo">
		SELECT ID, TITLE, ACCOUNT_ID
			FROM (SELECT PIBO_ID AS ID, CLAS_TITLE AS TITLE , PIBO_WRITER_ID AS ACCOUNT_ID
						FROM PILGI_BOARD JOIN CLASS
						ON PIBO_CLAS_ID = CLAS_ID
					UNION
					SELECT JIBO_ID, JIBO_TITLE , JIBO_WRITER_ID AS ACCOUNT_ID
						FROM JILMUN_BOARD
					UNION
					SELECT JABO_ID, JABO_TITLE , JABO_WRITER_ID AS ACCOUNT_ID
						FROM JAYU_BOARD)
			WHERE ID=#{id}
	</select>
	
	<select id="getReplyAlramInfo" resultType="replyVo">
		SELECT CORE_BOARD_ID AS BOARD_ID, CORE_CONTENT AS CONTENT, CORE_WRITER_ID AS WRITER_ID
			FROM COMMUNITY_REPLY
			WHERE CORE_SEQ=#{seq}
	</select>
	
</mapper>
